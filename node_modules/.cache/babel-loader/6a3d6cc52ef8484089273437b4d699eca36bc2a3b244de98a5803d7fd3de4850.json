{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WeatherDisplay=_ref=>{var _weatherData$weather$,_weatherData$weather$2,_weatherData$weather$3,_weatherData$weather$4,_weatherData$weather$5,_weatherData$weather$6;let{weatherData}=_ref;const[displayIndex,setDisplayIndex]=useState(0);useEffect(()=>{// Rotate display every 10 seconds\nconst interval=setInterval(()=>{setDisplayIndex(prev=>(prev+1)%10);// Now rotating through 10 states (removed pressure)\n},10000);return()=>clearInterval(interval);},[]);// Return null if no weather data\nif(!weatherData||!weatherData.main)return null;// Convert wind speed from m/s to km/h\nconst windSpeedKmh=Math.round(weatherData.wind.speed*3.6);// Convert visibility from meters to kilometers\nconst visibilityKm=Math.round(weatherData.visibility/1000);// Convert Unix timestamps to local time\nconst formatTime=timestamp=>{return new Date(timestamp*1000).toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit',hour12:true});};// All possible weather displays\nconst weatherInfo=[// City name\n{icon:\"üìç\",text:`${weatherData.name}, ${weatherData.sys.country}`},// Weather condition\n{icon:((_weatherData$weather$=weatherData.weather[0])===null||_weatherData$weather$===void 0?void 0:_weatherData$weather$.main)===\"Clear\"?\"‚òÄÔ∏è\":((_weatherData$weather$2=weatherData.weather[0])===null||_weatherData$weather$2===void 0?void 0:_weatherData$weather$2.main)===\"Rain\"?\"üåßÔ∏è\":((_weatherData$weather$3=weatherData.weather[0])===null||_weatherData$weather$3===void 0?void 0:_weatherData$weather$3.main)===\"Clouds\"?\"‚òÅÔ∏è\":((_weatherData$weather$4=weatherData.weather[0])===null||_weatherData$weather$4===void 0?void 0:_weatherData$weather$4.main)===\"Snow\"?\"‚ùÑÔ∏è\":\"üå§Ô∏è\",text:`${(_weatherData$weather$5=weatherData.weather[0])===null||_weatherData$weather$5===void 0?void 0:(_weatherData$weather$6=_weatherData$weather$5.main)===null||_weatherData$weather$6===void 0?void 0:_weatherData$weather$6.toUpperCase()}`},// Current temperature\n{icon:\"üå°Ô∏è\",text:`TEMP ${Math.round(weatherData.main.temp)}¬∞C`},// Feels like\n{icon:\"üå°Ô∏è\",text:`FEELS ${Math.round(weatherData.main.feels_like)}¬∞C`},// Temperature range\n{icon:\"üå§Ô∏è\",text:`RANGE ${Math.round(weatherData.main.temp_min)}¬∞-${Math.round(weatherData.main.temp_max)}¬∞C`},// Wind info\n{icon:\"üí®\",text:`WIND ${windSpeedKmh}km/h ${weatherData.wind.deg}¬∞`},// Humidity\n{icon:\"üíß\",text:`HUMIDITY ${weatherData.main.humidity}%`},// Visibility\n{icon:\"üëÅÔ∏è\",text:`VISIBILITY ${visibilityKm}km`},// Cloudiness\n{icon:\"‚òÅÔ∏è\",text:`CLOUDS ${weatherData.clouds.all}%`},// Sunrise/Sunset\n{icon:\"üåÖ\",text:`SUN ${formatTime(weatherData.sys.sunrise)}-${formatTime(weatherData.sys.sunset)}`}];// Get current display info\nconst currentWeather=weatherInfo[displayIndex];return/*#__PURE__*/_jsxs(\"span\",{className:\"text-4xl font-bold whitespace-nowrap flex items-center gap-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-blue-400/80\",children:currentWeather.icon}),currentWeather.text]});};export default WeatherDisplay;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","WeatherDisplay","_ref","_weatherData$weather$","_weatherData$weather$2","_weatherData$weather$3","_weatherData$weather$4","_weatherData$weather$5","_weatherData$weather$6","weatherData","displayIndex","setDisplayIndex","interval","setInterval","prev","clearInterval","main","windSpeedKmh","Math","round","wind","speed","visibilityKm","visibility","formatTime","timestamp","Date","toLocaleTimeString","hour","minute","hour12","weatherInfo","icon","text","name","sys","country","weather","toUpperCase","temp","feels_like","temp_min","temp_max","deg","humidity","clouds","all","sunrise","sunset","currentWeather","className","children"],"sources":["C:/Users/Cric Blast Radio/Desktop/To work on/New folder/Crex Scorecard More Data/frontend/src/components/cricket/components/WeatherDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst WeatherDisplay = ({ weatherData }) => {\n  const [displayIndex, setDisplayIndex] = useState(0);\n  \n  useEffect(() => {\n    // Rotate display every 10 seconds\n    const interval = setInterval(() => {\n      setDisplayIndex((prev) => (prev + 1) % 10); // Now rotating through 10 states (removed pressure)\n    }, 10000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // Return null if no weather data\n  if (!weatherData || !weatherData.main) return null;\n\n  // Convert wind speed from m/s to km/h\n  const windSpeedKmh = Math.round(weatherData.wind.speed * 3.6);\n\n  // Convert visibility from meters to kilometers\n  const visibilityKm = Math.round(weatherData.visibility / 1000);\n\n  // Convert Unix timestamps to local time\n  const formatTime = (timestamp) => {\n    return new Date(timestamp * 1000).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  // All possible weather displays\n  const weatherInfo = [\n    // City name\n    {\n      icon: \"üìç\",\n      text: `${weatherData.name}, ${weatherData.sys.country}`\n    },\n    // Weather condition\n    {\n      icon: weatherData.weather[0]?.main === \"Clear\" ? \"‚òÄÔ∏è\" :\n            weatherData.weather[0]?.main === \"Rain\" ? \"üåßÔ∏è\" :\n            weatherData.weather[0]?.main === \"Clouds\" ? \"‚òÅÔ∏è\" :\n            weatherData.weather[0]?.main === \"Snow\" ? \"‚ùÑÔ∏è\" : \"üå§Ô∏è\",\n      text: `${weatherData.weather[0]?.main?.toUpperCase()}`\n    },\n    // Current temperature\n    {\n      icon: \"üå°Ô∏è\",\n      text: `TEMP ${Math.round(weatherData.main.temp)}¬∞C`\n    },\n    // Feels like\n    {\n      icon: \"üå°Ô∏è\",\n      text: `FEELS ${Math.round(weatherData.main.feels_like)}¬∞C`\n    },\n    // Temperature range\n    {\n      icon: \"üå§Ô∏è\",\n      text: `RANGE ${Math.round(weatherData.main.temp_min)}¬∞-${Math.round(weatherData.main.temp_max)}¬∞C`\n    },\n    // Wind info\n    {\n      icon: \"üí®\",\n      text: `WIND ${windSpeedKmh}km/h ${weatherData.wind.deg}¬∞`\n    },\n    // Humidity\n    {\n      icon: \"üíß\",\n      text: `HUMIDITY ${weatherData.main.humidity}%`\n    },\n    // Visibility\n    {\n      icon: \"üëÅÔ∏è\",\n      text: `VISIBILITY ${visibilityKm}km`\n    },\n    // Cloudiness\n    {\n      icon: \"‚òÅÔ∏è\",\n      text: `CLOUDS ${weatherData.clouds.all}%`\n    },\n    // Sunrise/Sunset\n    {\n      icon: \"üåÖ\",\n      text: `SUN ${formatTime(weatherData.sys.sunrise)}-${formatTime(weatherData.sys.sunset)}`\n    }\n  ];\n\n  // Get current display info\n  const currentWeather = weatherInfo[displayIndex];\n\n  return (\n    <span className=\"text-4xl font-bold whitespace-nowrap flex items-center gap-3\">\n      <span className=\"text-blue-400/80\">{currentWeather.icon}</span>\n      {currentWeather.text}\n    </span>\n  );\n};\n\nexport default WeatherDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}